// Code generated by cool go-validate tool; DO NOT EDIT.
package {{.Package}}

{{range .Imports}}
    import "{{.}}"
{{end}}

type ValidationError error
type ValueValidator func() (*ValidationError, error)


{{range .ValidationTargets}}
    func ({{.Alias}} *{{.Type}}) Validate() ([]ValidationError, error){
        validators := []ValueValidator{
        {{- range .Validators}}
            {{- if eq .Field.Type "int"}}
                {{- if eq .Name "min" }}{{template "int_min_validator" .}},{{- end}}
                {{- if eq .Name "max" }}{{template "int_max_validator" .}},{{- end}}
                {{if eq .Name "in" }}{{template "in_validator" .}},{{end}}
            {{- end}}
            {{- if eq .Field.Type "[]int"}}
                {{- if .Name "min" }}{{template "array_int_min_validator" .}},{{- end}}
                {{- if eq .Name "max" }}{{template "array_int_max_validator" .}},{{- end}}
                {{- if eq .Name "in" }}{{template "array_in_validator" .}},{{- end}}
            {{- end}}
            {{- if eq .Field.Type "string"}}
                {{- if eq .Name "len" }}{{template "string_len_validator" .}},{{- end}}
    {{/*            {{if eq .Name "regexp" }}{{template "regexp_validator" .}},{{end}}*/}}
                {{- if eq .Name "in" }}{{template "in_validator" . }},{{- end}}
            {{- end}}
            {{- if eq .Field.Type "[]string"}}
                {{- if eq .Name "len" }}{{template "array_string_len_validator" .}},{{- end}}
                {{- if eq .Name "regexp" }}{{template "array_string_regexp_validator" . }},{{- end}}
                {{- if eq .Name "in" }}{{template "array_in_validator" .}},{{- end}}
            {{- end}}
        {{- end}}
        }

        var validationErrors []ValidationError
        var err error

        for _, v := range validators {
            validationError, err := v()

            if validationError != nil {
                validationErrors = append(validationErrors, validationError)
            }

            if err != nil {
                return nil, err
            }
        }

        return validationErrors, nil
    }
{{end}}

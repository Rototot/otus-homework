// Code generated by cool go-validate tool; DO NOT EDIT.
package models

import "fmt"

type ValidationError error
type ValueValidator func() (*ValidationError, error)

func (u *User) Validate() ([]ValidationError, error) {
	validators := []ValueValidator{
		func() (*ValidationError, error) {
			if len(u.ID) > 36 {
				return fmt.Errorf("length of the %s more than %d", u.ID, 36)
			}

			return nil
		},
		func() (*ValidationError, error) {
			if u.Age < 18 {
				return fmt.Errorf("%d less than %d", u.Age, 18), nil
			}

			return nil, nil
		},
		func() (*ValidationError, error) {
			if u.Age > 50 {
				return fmt.Errorf("%d more than %d", u.Age, 50)
			}

			return nil
		},

		func() (*ValidationError, error) {
			if len(u.Phones) > 11 {
				return fmt.Errorf("length of the %s more than %d", u.Phones, 11)
			}

			return nil
		},
	}

	var validationErrors []ValidationError
	var err error

	for _, v := range validators {
		validationError, err := v()

		if validationError != nil {
			validationErrors = append(validationErrors, validationError)
		}

		if err != nil {
			return nil, err
		}
	}

	return validationErrors, nil
}

func (a *App) Validate() ([]ValidationError, error) {
	validators := []ValueValidator{
		func() (*ValidationError, error) {
			if len(a.Version) > 5 {
				return fmt.Errorf("length of the %s more than %d", a.Version, 5)
			}

			return nil
		},
	}

	var validationErrors []*ValidationError
	var err error

	for _, v := range validators {
		validationError, err := v()

		if validationError != nil {
			validationErrors = append(validationErrors, validationError)
		}

		if err != nil {
			return nil, err
		}
	}

	return validationErrors, nil
}

func (t *Token) Validate() ([]ValidationError, error) {
	validators := []ValueValidator{}

	var validationErrors []ValidationError
	var err error

	for _, v := range validators {
		validationError, err := v()

		if validationError != nil {
			validationErrors = append(validationErrors, validationError)
		}

		if err != nil {
			return nil, err
		}
	}

	return validationErrors, nil
}

func (r *Response) Validate() ([]ValidationError, error) {
	validators := []ValueValidator{

		func() (*ValidationError, error) {
			for _, item := range r.Code {
				if item == []int{200, 404, 500} {
					return nil
				}
			}

			return fmt.Errorf("%d is invalid and not in set", r.Code)
		},
	}

	var validationErrors []ValidationError
	var err error

	for _, v := range validators {
		validationError, err := v()

		if validationError != nil {
			validationErrors = append(validationErrors, validationError)
		}

		if err != nil {
			return nil, err
		}
	}

	return validationErrors, nil
}
